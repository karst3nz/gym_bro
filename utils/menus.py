import tempfile
from aiogram import types
from aiogram.fsm.context import FSMContext
from utils.states import States

async def start(user_id: int, state: FSMContext):
    await state.clear()
    text = (
        "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ GymBro!</b>\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–µ—Å—Ç–∏ —É—á—ë—Ç –º–∞—Å—Å—ã —Ç–µ–ª–∞ –∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π –¥–Ω–µ–≤–Ω–∏–∫.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "<b>/weight</b> ‚Äî –≤–≤–µ—Å—Ç–∏ —Ç–µ–∫—É—â–∏–π –≤–µ—Å\n"
        "<b>/workset</b> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞–±–æ—á–∏–π –ø–æ–¥—Ö–æ–¥\n"
        "<b>/record</b> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∫–æ—Ä–¥\n"
        "<b>/weight_stats</b> ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤–µ—Å—É —Ç–µ–ª–∞\n"
        "<b>/workset_stats</b> ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ä–∞–±–æ—á–∏–º –ø–æ–¥—Ö–æ–¥–∞–º\n"
    )
    btns = types.InlineKeyboardMarkup(
        inline_keyboard=[
            # [types.InlineKeyboardButton(text="–í–≤–µ—Å—Ç–∏ –≤–µ—Å", callback_data="menu:weight")],
            # [types.InlineKeyboardButton(text="–†–∞–±–æ—á–∏–π –ø–æ–¥—Ö–æ–¥", callback_data="menu:workset")],
            # [types.InlineKeyboardButton(text="–†–µ–∫–æ—Ä–¥", callback_data="menu:record")],
        ]
    )
    return text, btns


async def weight(user_id: int, state: FSMContext):
    await state.clear()
    await state.set_state(States.weight)
    text = "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–∫—É—â–∏–π –≤–µ—Å (–≤ –∫–≥):"
    btns = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:start")],
        ]
    )
    return text, btns

from utils.workset_stats import get_common_exercises
async def workset(user_id: int, state: FSMContext):
    await state.clear()
    await state.set_state(States.workset)
    text = (
        "–í–≤–µ–¥–∏—Ç–µ —Ä–∞–±–æ—á–∏–π –ø–æ–¥—Ö–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <b>–Ω–∞–∑–≤–∞–Ω–∏–µ, –≤–µ—Å, –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è</b>\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: <b>–ñ–∏–º –ª—ë–∂–∞, 80, 10</b>"
    )
    exercises = get_common_exercises(user_id, html=True); exercises = '\n'.join(exercises)
    if len(exercises) >= 1:
        text += (
        "\n\n–ù–∞–∑–≤–∞–Ω–∏—è –≤–∞—à–∏—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π:\n"
        f"{exercises}\n"
        "(–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å)"
        )
    btns = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:start")],
        ]
    )
    return text, btns

async def record(user_id: int, state: FSMContext):
    await state.clear()
    await state.set_state(States.record)
    text = (
        "–í–≤–µ–¥–∏—Ç–µ —Ä–µ–∫–æ—Ä–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <b>–Ω–∞–∑–≤–∞–Ω–∏–µ, –≤–µ—Å, –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è</b>\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: –ü—Ä–∏—Å–µ–¥, 120, 5"
    )
    exercises = get_common_exercises(user_id, html=True); exercises = '\n'.join(exercises)
    if len(exercises) >= 1:
        text += (
        "\n\n–ù–∞–∑–≤–∞–Ω–∏—è –≤–∞—à–∏—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π:\n"
        f"{exercises}\n"
        "(–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å)"
        )
    btns = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:start")],
        ]
    )
    return text, btns


def gen_exercises_pages(exercises: list, per_page: int = 5):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂:
    - pages: —Å–ª–æ–≤–∞—Ä—å {–Ω–æ–º–µ—Ä_—Å—Ç—Ä–∞–Ω–∏—Ü—ã: [–Ω–∞–∑–≤–∞–Ω–∏—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π]}
    - id_map: —Å–ª–æ–≤–∞—Ä—å {–≥–ª–æ–±–∞–ª—å–Ω—ã–π_id: –Ω–∞–∑–≤–∞–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è}
    """
    pages = {}
    id_map = {}
    page_num = 1
    page_context = []
    global_idx = 0

    for exercise in exercises:
        page_context.append(exercise)
        id_map[exercise] = global_idx
        global_idx += 1

        if len(page_context) == per_page:
            pages[page_num] = page_context
            page_context = []
            page_num += 1

    # –æ—Å—Ç–∞—Ç–æ–∫
    if page_context:
        pages[page_num] = page_context

    return pages, id_map



async def exercises_pages(user_id: int, page: int = 1):
    text = "–í—ã–±–µ—Ä–∏—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ:"
    pages, ids = gen_exercises_pages(get_common_exercises(user_id))
    btns = []
    if len(pages) == 0: return "–£ –≤–∞—Å –Ω–µ –∑–∞–ø–∏—Å–∞–Ω—ã —Ä–∞–±–æ—á–∏–µ –ø–æ–¥—Ö–æ–¥—ã!\n/workset - –¥–ª—è –∑–∞–ø–∏—Å–∏ —Ä–∞–±–æ—á–∏—Ö –ø–æ–¥—Ö–æ–¥–æ–≤", types.InlineKeyboardMarkup(inline_keyboard=[[]])
    for exercise in pages[page]:
        idx = ids.get(exercise)
        btns += [[types.InlineKeyboardButton(text=exercise, callback_data=f"workset_stats:{idx}:90")]]
    if page == 1 and len(pages.keys()) != 1:
        nav_btns = [
            [
                types.InlineKeyboardButton(text=f"{page}/{len(pages.keys())}", callback_data="pass"),
                types.InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"menu:exercises_pages?({page + 1})")
            ]
        ]
    
    elif len(pages.keys()) == 1:
        nav_btns = [[]]        
    
    elif page == len(pages.keys()):
        nav_btns = [
            [
                types.InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"menu:exercises_pages?({page - 1})"),
                types.InlineKeyboardButton(text=f"{page}/{len(pages.keys())}", callback_data="pass")
            ]
        ]               
    else:
        nav_btns = [
            [
                types.InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"menu:exercises_pages?({page - 1})"),
                types.InlineKeyboardButton(text=f"{page}/{len(pages.keys())}", callback_data="pass"),
                types.InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"menu:exercises_pages?({page + 1})")
            ]
        ]    
    btns += nav_btns
    return text, types.InlineKeyboardMarkup(inline_keyboard=btns)